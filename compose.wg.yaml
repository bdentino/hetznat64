networks:
  wgnet:
    enable_ipv6: true
    enable_ipv4: false

volumes:
  certificates: {}

services:
  certs:
    image: alpine/openssl:3.3.3
    volumes:
      - certificates:/certificates
    entrypoint:
      - /bin/sh
      - -c
      - |
        openssl genrsa -out /certificates/ca.key 4096 &&
        echo -e "[ ca_ext ]\nbasicConstraints=critical,CA:TRUE\nkeyUsage=critical,keyCertSign,cRLSign\nextendedKeyUsage=serverAuth,clientAuth\n" > /certificates/ca-ext.cnf &&
        openssl req -new -x509 -days 9000 \
          -key /certificates/ca.key \
          -out /certificates/ca.pem \
          -subj "/C=US/ST=State/L=City/O=Organization/OU=OrgUnit/CN=example.com" \
          -config <(cat /etc/ssl/openssl.cnf /certificates/ca-ext.cnf) \
          -extensions ca_ext &&
        chmod 644 /certificates/*

  server:
    build: .
    cap_add:
      - NET_ADMIN
    sysctls:
      net.ipv6.conf.all.forwarding: 1
      net.ipv6.conf.default.forwarding: 1
      net.ipv6.conf.all.disable_ipv6: 0
      net.ipv6.conf.default.disable_ipv6: 0
    entrypoint:
      - /bin/sh
      - -c
      - |
        /generate-cert.sh --ca=/certificates/ca.pem --dev=eth0:eth1:eth2 --out=/home/wireguard \
          && exec python3 service.py
    develop:
      watch:
        - action: sync+restart
          path: ./service.py
          target: /app/service.py
        - action: sync+restart
          path: ./entrypoint.sh
          target: /entrypoint.sh
    environment:
      PYTHONUNBUFFERED: "1"
      WG_INTERFACE: "hetznat64"
      WG_LOG_LEVEL: "trace"
      WG_IPV6: "$WG_NETWORK"
      WG_PORT: "51820"
      HCLOUD_API_TOKEN: "dummy_token"
      HCLOUD_API_ENDPOINT: "http://hetzner:5000/v1"
      DISCOVERY_LABEL_PREFIX: "$DISCOVERY_LABEL_PREFIX"
      CA_FILE: "/certificates/ca.pem"
      CERT_FILE: "/home/wireguard/cert.pem"
      KEY_FILE: "/home/wireguard/cert.key"
    networks:
      hetzner: {}
      wgnet:
        gw_priority: 2
      nat64:
        gw_priority: 1
        ipv6_address: "$WG_NAT64_IP"
        # TODO: not available until compose v2.36
        # interface_name: "nat64"
    depends_on:
      hetzner:
        condition: service_healthy
      tayga:
        condition: service_healthy
      certs:
        condition: service_completed_successfully
    volumes:
      - certificates:/certificates
  agent:
    scale: 1
    build: .
    entrypoint:
      - /bin/sh
      - -c
      - |
        /generate-cert.sh --ca=/certificates/ca.pem --dev=eth0:eth1:eth2 --out=/home/wireguard \
          && exec python3 agent.py
    cap_add:
      - NET_ADMIN
    sysctls:
      net.ipv6.conf.all.disable_ipv6: 0
      net.ipv6.conf.default.disable_ipv6: 0
    develop:
      watch:
        - action: sync+restart
          path: ./agent.py
          target: /app/agent.py
        - action: sync+restart
          path: ./entrypoint.sh
          target: /entrypoint.sh
    depends_on:
      server:
        condition: service_started
      dns64:
        condition: service_healthy
      certs:
        condition: service_completed_successfully
    healthcheck:
      # ping a nat64 address to make sure setup is valid
      test: ["CMD", "ping6", "-c", "1", "64:ff9b::8.8.8.8"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    dns:
      - "$DNS64_IP"
    environment:
      PYTHONUNBUFFERED: "1"
      WG_INTERFACE: "hetznat64"
      WG_PORT: "51820"
      WG_LOG_LEVEL: "trace"
      CONTROL_SERVER_HOSTNAME: "server"
      CONTROL_SERVER_PORT: "51820"
      PORT: "5001"
      CA_FILE: "/certificates/ca.pem"
      CERT_FILE: "/home/wireguard/cert.pem"
      KEY_FILE: "/home/wireguard/cert.key"
    labels:
      - "$DISCOVERY_LABEL_PREFIX.status=waiting"
    networks:
      wgnet:
        gw_priority: 2
      dns64:
        gw_priority: 1
      hetzner: {}
    volumes:
      - certificates:/certificates
